generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  name        String    @unique @db.VarChar(100)
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?   @db.VarChar(500)
  slug        String    @unique @db.VarChar(100)
  sortOrder   Int       @default(0)
  id          Int       @id @default(autoincrement())
  products    Product[]

  @@map("categories")
}

model Product {
  name             String          @db.VarChar(200)
  description      String?
  sku              String          @unique @db.VarChar(50)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  brand            String?         @db.VarChar(100)
  color            String?         @db.VarChar(50)
  costPrice        Decimal         @db.Decimal(10, 2)
  dimensions       String?         @db.VarChar(100)
  isActive         Boolean         @default(true)
  isFeatured       Boolean         @default(false)
  material         String?         @db.VarChar(100)
  metaDescription  String?         @db.VarChar(300)
  metaTitle        String?         @db.VarChar(200)
  price            Decimal         @db.Decimal(10, 2)
  shortDescription String?         @db.VarChar(500)
  size             String?         @db.VarChar(50)
  slug             String          @unique @db.VarChar(200)
  weight           Decimal?        @db.Decimal(8, 2)
  id               Int             @id @default(autoincrement())
  categoryId       Int
  inventory        Inventory?
  orderItems       OrderItem[]
  images           ProductImage[]
  category         Category        @relation(fields: [categoryId], references: [id])
  stockMovements   StockMovement[]

  @@map("products")
}

model ProductImage {
  id           Int      @id @default(autoincrement())
  productId    Int
  cloudinaryId String   @db.VarChar(200)
  imageUrl     String   @db.VarChar(500)
  altText      String?  @db.VarChar(200)
  isPrimary    Boolean  @default(false)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Inventory {
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastRestockedAt   DateTime?
  maxStockLevel     Int       @default(1000)
  quantityAvailable Int       @default(0)
  quantityReserved  Int       @default(0)
  reorderLevel      Int       @default(10)
  id                Int       @id @default(autoincrement())
  productId         Int       @unique
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model StockMovement {
  id            Int                @id @default(autoincrement())
  productId     Int
  movementType  StockMovementType
  quantity      Int
  referenceType StockReferenceType
  referenceId   Int?
  notes         String?
  unitCost      Decimal?           @db.Decimal(10, 2)
  createdBy     Int
  createdAt     DateTime           @default(now())
  createdByUser User               @relation(fields: [createdBy], references: [id])
  product       Product            @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model Order {
  orderNumber             String                  @unique @db.VarChar(50)
  customerName            String                  @db.VarChar(200)
  customerEmail           String?                 @db.VarChar(255)
  customerPhone           String?                 @db.VarChar(20)
  status                  OrderStatus             @default(PENDING)
  totalAmount             Decimal                 @db.Decimal(12, 2)
  notes                   String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  address                 String                  @db.VarChar(500)
  cityId                  Int
  cityName                String                  @db.VarChar(100)
  codAmount               Decimal?                @db.Decimal(12, 2)
  deliveredAt             DateTime?
  deliveryStatus          KoombiyoDeliveryStatus? @default(NOT_SENT)
  discountAmount          Decimal                 @default(0.00) @db.Decimal(10, 2)
  districtId              Int
  districtName            String                  @db.VarChar(100)
  internalNotes           String?
  koombiyoLastStatus      String?                 @db.VarChar(100)
  koombiyoOrderId         String?                 @db.VarChar(100)
  koombiyoStatusUpdatedAt DateTime?
  orderedAt               DateTime                @default(now())
  packageDescription      String?                 @db.VarChar(500)
  paymentMethod           PaymentMethod
  paymentStatus           PaymentStatus           @default(PENDING)
  sentToDeliveryAt        DateTime?
  shippedAt               DateTime?
  shippingAmount          Decimal                 @default(0.00) @db.Decimal(10, 2)
  specialNotes            String?
  subtotal                Decimal                 @db.Decimal(12, 2)
  waybillId               String?                 @unique @db.VarChar(50)
  id                      Int                     @id @default(autoincrement())
  deliveryLogs            DeliveryLog[]
  orderItems              OrderItem[]
  paymentTransactions     PaymentTransaction[]

  @@map("orders")
}

model OrderItem {
  quantity    Int
  createdAt   DateTime @default(now())
  productName String   @db.VarChar(200)
  sku         String   @db.VarChar(50)
  totalPrice  Decimal  @db.Decimal(12, 2)
  unitCost    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(10, 2)
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model PaymentTransaction {
  id             Int               @id @default(autoincrement())
  orderId        Int
  transactionId  String            @unique @db.VarChar(100)
  paymentMethod  PaymentMethod
  amount         Decimal           @db.Decimal(12, 2)
  status         TransactionStatus
  bankDetails    String?           @db.VarChar(500)
  depositSlipUrl String?           @db.VarChar(500)
  verifiedBy     Int?
  verifiedAt     DateTime?
  notes          String?
  processedAt    DateTime?
  createdAt      DateTime          @default(now())
  order          Order             @relation(fields: [orderId], references: [id])
  verifiedByUser User?             @relation(fields: [verifiedBy], references: [id])

  @@map("payment_transactions")
}

model User {
  email                String               @unique @db.VarChar(255)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  emailVerifiedAt      DateTime?
  firstName            String               @db.VarChar(100)
  isActive             Boolean              @default(true)
  lastLoginAt          DateTime?
  lastName             String               @db.VarChar(100)
  passwordHash         String               @db.VarChar(255)
  id                   Int                  @id @default(autoincrement())
  role                 UserRole
  status               UserStatus           @default(PENDING)
  activityLogs         ActivityLog[]
  deliveryLogs         DeliveryLog[]
  expenses             Expense[]
  verifiedTransactions PaymentTransaction[]
  stockMovements       StockMovement[]

  @@map("users")
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String   @db.VarChar(100)
  entityType  String   @db.VarChar(50)
  entityId    Int
  description String?
  ipAddress   String?  @db.VarChar(45)
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model DeliveryLog {
  id            Int            @id @default(autoincrement())
  orderId       Int
  action        DeliveryAction
  status        String?        @db.VarChar(100)
  message       String?
  response      Json?
  createdBy     Int?
  createdAt     DateTime       @default(now())
  createdByUser User?          @relation(fields: [createdBy], references: [id])
  order         Order          @relation(fields: [orderId], references: [id])

  @@map("delivery_logs")
}

model Expense {
  description        String              @db.VarChar(500)
  amount             Decimal             @db.Decimal(12, 2)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  createdBy          Int
  expenseDate        DateTime            @db.Date
  isRecurring        Boolean             @default(false)
  receiptUrl         String?             @db.VarChar(500)
  recurringFrequency RecurringFrequency?
  referenceNumber    String?             @db.VarChar(100)
  subcategory        String?             @db.VarChar(100)
  supplierName       String?             @db.VarChar(200)
  id                 Int                 @id @default(autoincrement())
  category           ExpenseCategory
  createdByUser      User                @relation(fields: [createdBy], references: [id])

  @@map("expenses")
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
}

enum StockReferenceType {
  PURCHASE
  SALE
  RETURN
  DAMAGE
  ADJUSTMENT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  READY_FOR_DELIVERY
  SENT_TO_DELIVERY
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum KoombiyoDeliveryStatus {
  NOT_SENT
  SENT_TO_KOOMBIYO
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED_DELIVERY
  RETURNED
  CANCELLED
}

enum DeliveryAction {
  SENT_TO_KOOMBIYO
  STATUS_UPDATE
  PICKUP_REQUEST
  TRACKING_UPDATE
  RETURN_RECEIVED
  ERROR_LOG
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum ExpenseCategory {
  INVENTORY
  SHIPPING
  MARKETING
  OPERATIONS
  OFFICE
  UTILITIES
  FEES
  OTHER
}

enum RecurringFrequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  STAFF
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
}
